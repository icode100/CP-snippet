{
"": {
  "prefix": "cp",
  "scope": "python",
  "body": [
    "from math import *",
    "from heapq import *",
    "from collections import *",
    "from bisect import *",
    "from functools import *",
    "from itertools import *",
    "from operator import *",
    "from typing import *",
    "import sys",
    "",
    "# Fast input/output",
    "input = sys.stdin.read",
    "def inp(): return sys.stdin.readline().strip()",
    "def inpl(): return list(map(int, inp().split()))",
    "def inpi(): return int(inp())",
    "def inps(): return set(map(int, inp().split()))",
    "",
    "# Constants",
    "mod = 10**9 + 7",
    "pi = 3.141592653589793238",
    "INT_MAX = sys.maxsize",
    "INT_MIN = -sys.maxsize - 1",
    "",
    "def function():",
    "    n = inpi()",
    "    nums = inpl()",
    "",
    "def main():",
    "    for _ in range(inpi()):",
    "        function()",
    "main()",
    ""
  ],
  "description": ""
},
"sieve_py":{
    "scope": "python",
    "prefix": "sieve",
    "body": [
      "def sieve_of_eratosthenes(n):",
      "    primes = [True] * (n+1)",
      "    p = 2",
      "    while (p * p <= n):",
      "        if primes[p]:",
      "            for i in range(p * p, n + 1, p):",
      "                primes[i] = False",
      "        p += 1",
      "    return [p for p in range(2, n+1) if primes[p]]",
      ""
    ],
    "description": ""
},
"tree_py":{
      "prefix": "tree",
      "body": [
        "class Node:",
        "    def __init__(${1:value}):",
        "        self.value = ${1:value}",
        "        self.left = None",
        "        self.right = None",
        "",
        "class BinaryTree:",
        "    def __init__():",
        "        self.root = None",
        "",
        "    def insert(self, value):",
        "        if self.root is None:",
        "            self.root = Node(value)",
        "        else:",
        "            self._insert(self.root, value)",
        "",
        "    def _insert(self, current_node, value):",
        "        if value < current_node.value:",
        "            if current_node.left is None:",
        "                current_node.left = Node(value)",
        "            else:",
        "                self._insert(current_node.left, value)",
        "        elif value > current_node.value:",
        "            if current_node.right is None:",
        "                current_node.right = Node(value)",
        "            else:",
        "                self._insert(current_node.right, value)",
        "",
        "    def inorder(self, node):",
        "        if node:",
        "            self.inorder(node.left)",
        "            print(node.value, end=' ')",
        "            self.inorder(node.right)",
        "",
        "    def preorder(self, node):",
        "        if node:",
        "            print(node.value, end=' ')",
        "            self.preorder(node.left)",
        "            self.preorder(node.right)",
        "",
        "    def postorder(self, node):",
        "        if node:",
        "            self.postorder(node.left)",
        "            self.postorder(node.right)",
        "            print(node.value, end=' ')",
      
      ],
      "description": ""
  
},
"cpp": {
  "scope": "cpp",
  "prefix": "cp",
  "body": [
    "#include <bits/stdc++.h>",
    "using namespace std;",
    "",
    "// fast io",
    "#define fast_io ios_base::sync_with_stdio(false); cin.tie(NULL);",
    "",
    "//Aliases",
    "using ll= long long;",
    "using lld= long double;",
    "using ull= unsigned long long;",
    "",
    "//Constants",
    "const lld pi = 3.141592653589793238;",
    "const ll inf = LONG_LONG_MAX;",
    "const ll mod=1e9+7;",
    "",
    "// Macros",
    "#define loop(i,m,n) for(int i=m;i<n;i++)",
    "#define loop_r(i,m,n) for(int i=m;i>n;i--)",
    "#define range(v) v.begin(),v.end()",
    "#define range_r(v) v.end(),v.begin()",
    "#define IN_SEQ(container,element) (find(container.begin(), container.end(), element) != container.end()) // for vector and queue",
    "#define IN(container,element) ((container).find(element) != (container).end()) // for map and set",
    "#define print(n) cout<<n<<endl;",
    "",
    "",
    "//utils",
    "template<typename T>",
    "unordered_map<T,int> Counter(vector<T> vec){",
    "    unordered_map<T,int> counter;",
    "    for(auto it:vec){",
    "        counter[it]+=1;",
    "    }",
    "    return counter;",
    "}",
    "unordered_map<char,int> Counter(string s){",
    "    unordered_map<char,int> counter;",
    "    for(auto it:s){",
    "       counter[it]+=1;",
    "    }",
    "    return counter;",
    "}",
    "",
    "// Operator overloads",
    "template<typename T1, typename T2> ",
    "istream& operator>>(istream &istream, pair<T1, T2> &p) { return (istream >> p.first >> p.second); }",
    "template<typename T> ",
    "istream& operator>>(istream &istream, vector<T> &v){for (auto &it : v)cin >> it;return istream;}",
    "template<typename T> ",
    "istream& operator>>(istream &istream, unordered_set<T> &v){for (auto &it : v)cin >> it;return istream;}",
    "template<typename T> ",
    "istream& operator>>(istream &istream, set<T> &v){for (auto &it : v)cin >> it;return istream;}",
    "template<typename T1, typename T2> ",
    "ostream& operator<<(ostream &ostream, const pair<T1, T2> &p) { return (ostream << p.first << \" \" << p.second); }",
    "template<typename T> ",
    "ostream& operator<<(ostream &ostream, const vector<T> &c) { for (auto &it : c) cout << it << \" \"; return ostream; }",
    "template<typename T> ",
    "ostream& operator<<(ostream &ostream, const unordered_set<T> &c) { for (auto &it : c) cout << it << \" \"; return ostream; }",
    "template<typename T> ",
    "ostream& operator<<(ostream &ostream, const set<T> &c) { for (auto &it : c) cout << it << \" \"; return ostream; }",
    "template<typename T1,typename T2> ",
    "ostream& operator<<(ostream &ostream, const unordered_map<T1,T2> &c) { for (const auto &it : c) cout <<\"{\"<< it.first << \":\"<<it.second<<\"}\"<<endl; return ostream; }",
    "template<typename T1,typename T2> ",
    "ostream& operator<<(ostream &ostream, const map<T1,T2> &c) { for (const auto &it : c) cout <<\"{\"<< it.first << \":\"<<it.second<<\"}\"<<endl; return ostream; }",
    "",
    "",
    "void fx(){",
    "    return;",
    "}",
    "",
    "int main(){",
    "    fast_io",
    "    ll t;",
    "    cin>>t;",
    "    loop(i,0,t){",
    "        fx();",
    "    }",
    "    return 0;",
    "}",
    ""
  ],
  "description": ""
},
"tree": {
  "prefix": "tree",
  "scope":"cpp",
  "body": [
    "template <typename T>",
    "struct ListNode{",
    "    T data;",
    "    ListNode* next;",
    "    ListNode(T val) : data(val), next(nullptr){}",
    "};"
  ],
  "description": "This is for tree node"
},
"LinkedList": {
  "prefix": "linkedlist",
  "body": [
    "template <typename T>",
    "struct ListNode{",
    "    T data;",
    "    ListNode* next;",
    "    ListNode(T val) : data(val), next(nullptr){}",
    "};",
    ""
  ],
  "description": ""
},
"Heaps": {
  "prefix": "heapq",
  "scope": "cpp",
  "body": [
    "template<typename T> using MinHeap = priority_queue<T, vector<T>, greater<T>>; // Min-heap",
    "template<typename T> using MaxHeap = priority_queue<T>; //Max-heap "
  ],
  "description": ""
},
"sieve": {
  "prefix": "sieve",
  "scope": "cpp",
  "body": [
    "template<typename T>",
    "vector<T> sieve_of_eratosthenes(T n) {",
    "    vector<bool> is_prime(n + 1, true);  // Boolean array to mark primes",
    "    is_prime[0] = is_prime[1] = false;   // 0 and 1 are not prime",
    "",
    "    for (T i = 2; i * i <= n; ++i) {",
    "        if (is_prime[i]) {",
    "            // Mark multiples of i as non-prime",
    "            for (T j = i * i; j <= n; j += i) {",
    "                is_prime[j] = false;",
    "            }",
    "        }",
    "    }",
    "",
    "    // Collect all prime numbers",
    "    vector<T> primes;",
    "    for (T i = 2; i <= n; ++i) {",
    "        if (is_prime[i]) {",
    "            primes.push_back(i);",
    "        }",
    "    }",
    "    return primes;",
    "}"
  ],
  "description": ""
}
}
